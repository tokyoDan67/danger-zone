// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract ExploitableVault is ERC721Holder {
    
    mapping(address => bool) public underlyingAssets;
    // ERC721 Contract => tokenId => addresss
    mapping(address => mapping(uint256 => address)) owners;

    function depositAsset (address _asset, uint256 _tokenId) external {
        
        if (!underlyingAssets[_asset]) {
            underlyingAssets[_asset] = true;
        }

        ERC721(_asset).safeTransferFrom(msg.sender, address(this), _tokenId);
    }

    function withdraw(address _recipient, address _asset, uint256 _tokenId) external {
        require(underlyingAssets[_asset]);

        if (ERC721(_asset).balanceOf(address(this)) == 0) {
            underlyingAssets[_asset] = false;
        }

        ERC721(_asset).safeTransfer(_recipient, _tokenId);
    }
}
contract Exploiter { 

    ERC721 bayc = ERC721(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) public returns (bytes4) {
        
        

        return this.onERC721Received.selector;
    }
}

